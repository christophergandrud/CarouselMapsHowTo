ModelParty.sim4 <- sim(PL.35.4, x = ModelParty4)
# Extract expected values from simulations
ModelParty.ev4 <- ModelParty.sim4$qi
ModelParty.ev4 <-data.frame(ModelParty.ev4$ev)
names(ModelParty.ev4) <- c("Rep", "Dem")
ModelParty.ev4 <- melt(ModelParty.ev4, measure = 1:2)
ModelParty.ev4$variable <- factor(ModelParty.ev4$variable)
ModelParty.ev4$QrtEstimate <- 4
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
ModelParty.evPer4 <- ddply(ModelParty.ev4, .(variable), transform, Lower = value < quantile(value, c(0.025)))
ModelParty.evPer4 <- ddply(ModelParty.evPer4, .(variable), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
ModelParty.evPer4 <- subset(ModelParty.evPer4, Lower == FALSE & Upper == FALSE)
## Quarter 5 ##
# Set fitted values, all variables other than pres_party set to their means
ModelParty5 <- setx(PL.35.5, pres_party = pres_party.r)
# Simulate quantities of interest
ModelParty.sim5 <- sim(PL.35.5, x = ModelParty5)
# Extract expected values from simulations
ModelParty.ev5 <- ModelParty.sim5$qi
ModelParty.ev5 <-data.frame(ModelParty.ev5$ev)
names(ModelParty.ev5) <- c("Rep", "Dem")
ModelParty.ev5 <- melt(ModelParty.ev5, measure = 1:2)
ModelParty.ev5$variable <- factor(ModelParty.ev5$variable)
ModelParty.ev5$QrtEstimate <- 5
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
ModelParty.evPer5 <- ddply(ModelParty.ev5, .(variable), transform, Lower = value < quantile(value, c(0.025)))
ModelParty.evPer5 <- ddply(ModelParty.evPer5, .(variable), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
ModelParty.evPer5 <- subset(ModelParty.evPer5, Lower == FALSE & Upper == FALSE)
ModelPartyAll <- rbind(ModelParty.evPer0, ModelParty.evPer1,
ModelParty.evPer2, ModelParty.evPer3, ModelParty.evPer4, ModelParty.evPer5)
# Create objects recording the number of observations used in each model.
O0 <- nrow(CPIMdfParty02)
O1 <- nrow(subset(CPIMdfParty02, time_to_election != 15))
O2 <- nrow(subset(CPIMdfParty02, !(time_to_election %in% c(15, 14))))
O3 <- nrow(CPIMdfParty35)
O4 <- nrow(subset(CPIMdfParty35 , !(time_to_election %in% c(15, 14, 13, 12))))
O5 <- nrow(subset(CPIMdfParty35 , !(time_to_election %in% c(15, 14, 13, 12, 11))))
#### Plot expected values ####
# Partisan colours, initially run in ErrorPresPartyGraph.R
# partisan.colors = c("Rep" = "#C42B00", "Dem" = "#2259B3")
# Create plot
ModelPartyPlotAll <- ggplot(data = ModelPartyAll, aes(QrtEstimate, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = variable), colour = "grey70") +
geom_point(aes(colour = variable), alpha = I(0.05), size = 3) +
scale_color_manual(values = partisan.colors,
name = "") +
scale_x_reverse() +
scale_y_continuous(breaks = c(-0.5, -0.25, 0, 0.25, 0.34),
labels = c(-0.5, -0.25, 0, 0.25, "N =")) +
xlab("\n Age of Forecast in Quarters") +
ylab("Expected Standardized Forecast Error \n") +
annotate(geom = "text", x = 5, y = 0.34,
label = O5, size = 4) +
annotate(geom = "text", x = 4, y = 0.34,
label = O4, size = 4) +
annotate(geom = "text", x = 3, y = 0.34,
label = O3, size = 4) +
annotate(geom = "text", x = 2, y = 0.34,
label = O2, size = 4) +
annotate(geom = "text", x = 1, y = 0.34,
label = O1, size = 4) +
annotate(geom = "text", x = 0, y = 0.34,
label = O0, size = 4) +
guides(colour = guide_legend(override.aes = list(alpha = 1), reverse = TRUE)) +
theme_bw(base_size = 12)
print(ModelPartyPlotAll)
partisan.colors = c("Rep" = "#C42B00", "Dem" = "#2259B3")
# Create plot
ModelPartyPlotAll <- ggplot(data = ModelPartyAll, aes(QrtEstimate, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = variable), colour = "grey70") +
geom_point(aes(colour = variable), alpha = I(0.05), size = 3) +
scale_color_manual(values = partisan.colors,
name = "") +
scale_x_reverse() +
scale_y_continuous(breaks = c(-0.5, -0.25, 0, 0.25, 0.34),
labels = c(-0.5, -0.25, 0, 0.25, "N =")) +
xlab("\n Age of Forecast in Quarters") +
ylab("Expected Standardized Forecast Error \n") +
annotate(geom = "text", x = 5, y = 0.34,
label = O5, size = 4) +
annotate(geom = "text", x = 4, y = 0.34,
label = O4, size = 4) +
annotate(geom = "text", x = 3, y = 0.34,
label = O3, size = 4) +
annotate(geom = "text", x = 2, y = 0.34,
label = O2, size = 4) +
annotate(geom = "text", x = 1, y = 0.34,
label = O1, size = 4) +
annotate(geom = "text", x = 0, y = 0.34,
label = O0, size = 4) +
guides(colour = guide_legend(override.aes = list(alpha = 1), reverse = TRUE)) +
theme_bw(base_size = 12)
print(ModelPartyPlotAll)
ModelPartyPlotAll <- ggplot(data = ModelPartyAll, aes(QrtEstimate, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = variable), colour = "grey70") +
geom_point(aes(colour = variable), alpha = I(0.05), size = 3) +
scale_color_manual(values = partisan.colors,
name = "") +
scale_x_reverse() +
scale_y_continuous(breaks = c(-0.5, -0.25, 0, 0.25, 0.34),
labels = c(-0.5, -0.25, 0, 0.25, "N =")) +
xlab("\n Age of Forecast in Quarters") +
ylab("Expected Standardized Forecast Error \n") +
annotate(geom = "text", x = 5, y = 0.34,
label = O5) +
annotate(geom = "text", x = 4, y = 0.34,
label = O4, size = 4) +
annotate(geom = "text", x = 3, y = 0.34,
label = O3, size = 4) +
annotate(geom = "text", x = 2, y = 0.34,
label = O2, size = 4) +
annotate(geom = "text", x = 1, y = 0.34,
label = O1, size = 4) +
annotate(geom = "text", x = 0, y = 0.34,
label = O0, size = 4) +
guides(colour = guide_legend(override.aes = list(alpha = 1), reverse = TRUE)) +
theme_bw(base_size = 12)
print(ModelPartyPlotAll)
ModelPartyPlotAll <- ggplot(data = ModelPartyAll, aes(QrtEstimate, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = variable), colour = "grey70") +
geom_point(aes(colour = variable), alpha = I(0.05), size = 3) +
scale_color_manual(values = partisan.colors,
name = "") +
scale_x_reverse() +
scale_y_continuous(breaks = c(-0.5, -0.25, 0, 0.25, 0.34),
labels = c(-0.5, -0.25, 0, 0.25, "N =")) +
xlab("\n Age of Forecast in Quarters") +
ylab("Expected Standardized Forecast Error \n") +
annotate(geom = "text", x = 5, y = 0.34,
label = O5, size = 4) +
annotate(geom = "text", x = 4, y = 0.34,
label = O4, size = 4) +
annotate(geom = "text", x = 3, y = 0.34,
label = O3, size = 4) +
annotate(geom = "text", x = 2, y = 0.34,
label = O2, size = 4) +
annotate(geom = "text", x = 1, y = 0.34,
label = O1, size = 4) +
annotate(geom = "text", x = 0, y = 0.34,
label = O0, size = 4) +
guides(colour = guide_legend(override.aes = list(alpha = 1), reverse = TRUE)) +
theme_bw(base_size = 12)
print(ModelPartyPlotAll)
class(M1)
# Load library
library(openintro)
# Load data
data(marioKart)
# Show Variables
names(marioKart)
M1 <- lm(totalPr ~ duration + cond +
wheels, data = marioKart)
CI <- confint(M1)
CI
class(M1)
library(ggplot2)
CIGraph <- data.frame(CI)
viewData(CIGraph)
?data.frame
CIGraph$vars <- row.names(CIGraph)
names(CIGraph)
library(reshape)
CIGraph <- rename(CIGraph, c(X2.5.. = "Lower", X97.5.. = "Upper"))
ggplot(CIGraph, aes(x = vars, ymin = Lower, ymax = Upper)) +
geom_linerange() +
theme_bw()
ggplot(CIGraph, aes(x = vars, ymin = Lower, ymax = Upper)) +
geom_linerange(size = 3, alpha = 0.6) +
theme_bw()
ggplot(CIGraph, aes(x = vars, ymin = Lower, ymax = Upper)) +
geom_linerange(size = 3, alpha = 0.6) +
xlab("") + ylab("Coefficient Estimate") +
theme_bw()
M1 <- lm(totalPr ~ duration, data = marioKart)
library(apsrtable)
M1 <- lm(totalPr ~ wheels, data = marioKart)
M2 <- lm(totalPr ~ wheels + duration, data = marioKart)
M3 <- lm(totalPr ~ wheels + duration + cond, data = marioKart)
apsrtable(M1, M2, M3, stars = "default", caption = "Linear Regression for Mario Kart Total Selling Price")
library(Zelig)
?zelig
XOut <- setx(z.out)
XOut <- setx(ZOut)
ZOut <- zelig(totalPr ~ wheels + duration,
data = marioKart, model = "normal",
cite = FALSE)
XOut <- setx(ZOut)
viewData(XOut)
summary(marioKart$wheels)
range(marioKart$wheels)
WValues <- 1:4
XOut <- setx(ZOut)
viewData(XOut)
XOut <- setx(ZOut, wheels = WValues)
viewData(XOut)
ZSim <- sim(ZOut, x = XOut)
plot(Zsim)
plot(ZSim)
plot(ZSim, ylab = Expected Total Mario Kart Price)
plot(ZSim, ylab = "Expected Total Mario Kart Price")
plot(ZSim, ylab = "Expected Price",
xlab = "Number of Wheels Included")
plot(ZSim, ylab = "Expected Price",
xlab = "Number of Wheels Included",
labels = c(1, 2, 3, 4))
plot(ZSim, ylab = "Expected Price",
xlab = "Number of Wheels Included",
axis(labels = c(1, 2, 3, 4)))
plot(ZSim, ylab = "Expected Price", xlab = "Number of Wheels Included", axis(labels = c(1, 2, 3, 4)))
?plot
plot(ZSim, xlab = "Number of Wheels Included", ylab = "Expected Price")
option(axis(labels = c(1, 2, 3, 4)))
plot(ZSim, xlab = "Number of Wheels Included", ylab = "Expected Price",
option(axis(labels = c(1, 2, 3, 4)))
plot(ZSim, xlab = "Number of Wheels Included", ylab = "Expected Price",
option(axis(labels = c(1, 2, 3, 4))))
plot(ZSim, xlab = "Number of Wheels Included", ylab = "Expected Price",
option(axis(labels = c(1, 2, 3, 4))))
library(help=openintro)
?houseRace10
?president
?tgSpending
?poker
?heartTr
?gradesTV
?births
?MLB
?bdims
?census
data(census)
viewData(census)
M1 <- lm(totalFamilyIncome ~ age + sex + totalPersonalIncome, data = census)
summary(M1)
M1 <- lm(totalFamilyIncome ~ age + sex + totalPersonalIncome + raceGeneral, data = census)
summary(M1)
M1 <- lm(totalFamilyIncome ~ age + sex*totalPersonalIncome, data = census)
summary(M1)
M1 <- lmr(totalFamilyIncome ~ age + sex*totalPersonalIncome + (1|state), data = census)
M1 <- lmer(totalFamilyIncome ~ age + sex*totalPersonalIncome + (1|state), data = census)
library(lmer)
library(lmr4)
library(lmr)
M1 <- lm(totalFamilyIncome ~ age + sex + totalPersonalIncome + raceGeneral + maritalStatus, data = census)
summary(M1)
library(openintro)
# Load libraries
library(RCurl)
library(plyr)
library(xts)
library(ggplot2)
library(MASS)
library(reshape2)
# Load most recent data
URL <- "https://raw.github.com/christophergandrud/amcData/master/MainData/amcCountryYear.csv"
AMC <- getURL(URL)
AMC <- read.csv(textConnection(AMC))
#### Create lagged crisis variable (Crisis onset year + 3) ####
# Create individual year lags
AMCLag <- ddply(AMC, .(country), transform, SCL1 = c(NA, SystemicCrisis[-length(SystemicCrisis)]))
AMCLag <- ddply(AMCLag, .(country), transform, SCL2 = c(NA, SCL1[-length(SCL1)]))
# Create combined lagged variable
attach(AMCLag)
AMCLag$SystemicCrisisLag3 <- SystemicCrisis + SCL1 + SCL2
detach(AMCLag)
# Remove old lag variables
AMCLag$SCL1 <- AMCLag$SCL2 <- NULL
?nrow
nrow(AMCLag$ElectionYear)
nrow(AMCLag)
AMCLag <- ddply(AMCLag, .(country), transform, ElectionYear1 = c(ElectionYear[1:(nrow(AMCLag)-1)], NA))
AMCLag <- ddply(AMCLag, .(country), transform, ElectionYear1 = c(ElectionYear[1:(length(AMCLag)-1)], NA))
AMCLag <- ddply(AMCLag, .(country), transform, ElectionYear1 = c(ElectionYear[1:(length(ElectionYear)-1)], NA))
viewData(AMCLag)
AMCLag <- ddply(AMCLag, .(country), transform, ElectionYear1 = c(ElectionYear[(length(ElectionYear)-1)], NA))
?length
length(AMCLag)
library(slidify)
setwd("/git_repositories/CarouselMapsHowTo/")
slidify("index.Rmd")
publish(user = "christophergandrud", repo = "CarouselMapsHowTo", host = "github")
slidify("index.Rmd")
publish(user = "christophergandrud", repo = "CarouselMapsHowTo", host = "github")
library(openintro)
data(county)
?country
?county
M1 <- lm(fed_spend ~ poverty, data = county)
summary(M1)
library(ggplot2)
ggplot(data = county, aes(poverty, fed_spend)) +
geom_point() +
stat_smooth() +
theme_bw()
M2 <- lm(log(fed_spend ~ poverty, data = county))
M2 <- lm(log(fed_spend ~ poverty, data = county))
M2 <- lm(log(fed_spend) ~ poverty, data = county))
M2 <- lm(log(fed_spend) ~ poverty, data = county)
county$FSpendLog <- log(county$fed_spend)
M2 <- lm(FSpendLog ~ poverty, data = county)
ggplot(data = county, aes(poverty, log(fed_spend))) +
geom_point() +
stat_smooth() +
theme_bw()
ggplot(data = county, aes(poverty, log(fed_spend))) +
geom_point() +
stat_smooth(method = "lm") +
theme_bw()
ggplot(data = county, aes(poverty, fed_spend) +
geom_point() +
stat_smooth(method = "lm") +
theme_bw()
# Linear model of Federal Spending and Poverty
M1 <- lm(fed_spend ~ poverty, data = county)
ggplot(data = county, aes(poverty, fed_spend) +
geom_point() +
stat_smooth(method = "lm") +
theme_bw()
ggplot(data = county, aes(poverty, fed_spend)) +
geom_point() +
ggplot(data = county, aes(poverty, fed_spend)) +
geom_point() +
stat_smooth(method = "lm") +
theme_bw()
ggplot(data = county, aes(poverty, fed_spend)) +
geom_point() +
stat_smooth(method = "lm") +
theme_bw()
?log
log(0)
cor.test(county$poverty, county$fed_spend)
log(0.001)
county$fed_spendLog[county$fed_spend == 0] <- 0.001
viewData(county)
county$fed_spendLog <- county$fed_spend
county$fed_spendLog[county$fed_spendLog == 0] <- 0.001
viewData(county)
M2 <- lm(fed_spendLog ~ poverty, data = country)
M2 <- lm(fed_spendLog ~ poverty, data = county)
summary(M2)
summary(M1)
M1 <- lm(fed_spend ~ poverty, data = county)
# Summarize results
summary(M1)
cor.test(county$poverty, county$fed_spend)
summary(M1)
AMCLag <- ddply(AMCLag, .(country), transform, ElectionYear1 = c(ElectionYear[(2:nrow(ElectionYear)-1)], NA))
?lg
AMCLag <- ddply(AMCLag, .(country), transform, ElectionYear1 = lg(ElectionYear))
lg<-function(x)c(NA,x[1:(length(x)-1)])
AMCLag <- ddply(AMCLag, .(country), transform, ElectionYear1 = lg(ElectionYear))
viewData(AMCLag)
lg<-function(x)c(x[2:(length(x))], NA)
AMCLag <- ddply(AMCLag, .(country), transform, ElectionYear1 = lg(ElectionYear))
viewData(AMCLag)
# Load most recent data
URL <- "https://raw.github.com/christophergandrud/amcData/master/MainData/amcCountryYear.csv"
AMC <- getURL(URL)
AMC <- read.csv(textConnection(AMC))
#### Create lagged crisis variable (Crisis onset year -3) ####
# Create individual year lags
AMCLag <- ddply(AMC, .(country), transform, SCL1 = c(NA, SystemicCrisis[-length(SystemicCrisis)]))
AMCLag <- ddply(AMCLag, .(country), transform, SCL2 = c(NA, SCL1[-length(SCL1)]))
# Create combined lagged variable
attach(AMCLag)
AMCLag$SystemicCrisisLag3 <- SystemicCrisis + SCL1 + SCL2
detach(AMCLag)
# Remove old lag variables
AMCLag$SCL1 <- AMCLag$SCL2 <- NULL
#### Create Election Year +1 lag ####
lg<-function(x)c(x[2:(length(x))], NA)
AMCLag <- ddply(AMCLag, .(country), transform, ElectionYear1 = lg(ElectionYear))
#### Remove NA in AMC Type & Capture only an AMC's first year ####
AMCLag$AMCType[AMCLag$AMCType == ""] <- NA
NotNaAMCType <- subset(AMCLag, !is.na(AMCType) | AMCType != "None")
NotNaAMCType <- ddply(NotNaAMCType, .(country), transform, NotFirstYear = duplicated(NumAMCOpNoNA))
FirstYearNotNa <- subset(NotNaAMCType, NumAMCOpNoNA != 0 & NotFirstYear == FALSE)
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(ElectionYear1 ~ CrisisCreated) +
geom_bar() +
theme_bw()
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(ElectionYear1) +
geom_bar() +
theme_bw()
viewData(FirstYearNotNa)
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(ElectionYear1) +
geom_bar() +
theme_bw()
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(.~ ElectionYear1) +
geom_bar() +
theme_bw()
viewData(AMCLag)
AMCLag$ElectionYear1[AMCLag$ElectionYear1 == 2] <- "NoElection"
AMCLag$ElectionYear1[AMCLag$ElectionYear1 == 1] <- "Election"
viewData(AMCLag)
# Load most recent data
URL <- "https://raw.github.com/christophergandrud/amcData/master/MainData/amcCountryYear.csv"
AMC <- getURL(URL)
AMC <- read.csv(textConnection(AMC))
#### Create lagged crisis variable (Crisis onset year -3) ####
# Create individual year lags
AMCLag <- ddply(AMC, .(country), transform, SCL1 = c(NA, SystemicCrisis[-length(SystemicCrisis)]))
AMCLag <- ddply(AMCLag, .(country), transform, SCL2 = c(NA, SCL1[-length(SCL1)]))
# Create combined lagged variable
attach(AMCLag)
AMCLag$SystemicCrisisLag3 <- SystemicCrisis + SCL1 + SCL2
detach(AMCLag)
# Remove old lag variables
AMCLag$SCL1 <- AMCLag$SCL2 <- NULL
#### Create Election Year +1 lag ####
lg<-function(x)c(x[2:(length(x))], NA)
AMCLag <- ddply(AMCLag, .(country), transform, ElectionYear1 = lg(ElectionYear))
AMCLag$ElectionYear1[AMCLag$ElectionYear1 == 2] <- "NoElection"
AMCLag$ElectionYear1[AMCLag$ElectionYear1 == 1] <- "Election"
#### Remove NA in AMC Type & Capture only an AMC's first year ####
AMCLag$AMCType[AMCLag$AMCType == ""] <- NA
NotNaAMCType <- subset(AMCLag, !is.na(AMCType) | AMCType != "None")
NotNaAMCType <- ddply(NotNaAMCType, .(country), transform, NotFirstYear = duplicated(NumAMCOpNoNA))
FirstYearNotNa <- subset(NotNaAMCType, NumAMCOpNoNA != 0 & NotFirstYear == FALSE)
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(.~ ElectionYear1) +
geom_bar() +
theme_bw()
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(ElectionYear1 ~ CrisisCreated) +
geom_bar() +
theme_bw()
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(ElectionYear ~ CrisisCreated) +
geom_bar() +
theme_bw()
ggplot(data = FirstYearNotNa, aes(govfrac)) +
geom_density(aes(line = AMCType, color = AMCType)) +
theme_bw()
ggplot(data = FirstYearNotNa, aes(govfrac)) +
geom_freqpoly(aes(line = AMCType, color = AMCType), bandwidth = 0.1) +
theme_bw()
viewData(FirstYearNotNa)
ggplot(data = FirstYearNotNa, aes(log(CurrentAccount))) +
geom_density(aes(line = AMCType, color = AMCType)) +
theme_bw()
ggplot(data = FirstYearNotNa, aes(log(CurrentAccount))) +
geom_frequency(aes(line = AMCType, color = AMCType)) +
theme_bw()
ggplot(data = FirstYearNotNa, aes(log(CurrentAccount))) +
geom_freqpoly(aes(line = AMCType, color = AMCType)) +
theme_bw()
ggplot(data = FirstYearNotNa, aes(CurrentAccount)) +
geom_freqpoly(aes(line = AMCType, color = AMCType)) +
theme_bw()
viewData(NotNaAMCType)
viewData(FirstYearNotNa)
AMCLag$AMCType[AMCLag$AMCType == "(De)centralised"] <- "Decentralised"
AMCLag$AMCType[AMCLag$AMCType == ""] <- NA
NotNaAMCType <- subset(AMCLag, !is.na(AMCType) | AMCType != "None")
NotNaAMCType <- ddply(NotNaAMCType, .(country), transform, NotFirstYear = duplicated(NumAMCOpNoNA))
FirstYearNotNa <- subset(NotNaAMCType, NumAMCOpNoNA != 0 & NotFirstYear == FALSE)
ggplot(data = FirstYearNotNa, aes(CurrentAccount)) +
geom_freqpoly(aes(line = AMCType, color = AMCType)) +
theme_bw()
ggplot(data = FirstYearNotNa, aes(CurrentAccount)) +
geom_density(aes(line = AMCType, color = AMCType)) +
theme_bw()
ggplot(data = FirstYearNotNa, aes(log(GDPperCapita))) +
geom_density(aes(line = AMCType, color = AMCType)) +
theme_bw()
ggplot(data = FirstYearNotNa, aes(UDS)) +
geom_density(aes(line = AMCType, color = AMCType)) +
theme_bw()
ggplot(data = FirstYearNotNa, aes(govfrac)) +
geom_freqpoly(aes(line = AMCType, color = AMCType), bandwidth = 0.1) +
theme_bw()
ggplot(data = FirstYearNotNa, aes(govfrac)) +
geom_density(aes(line = AMCType, color = AMCType)) +
theme_bw()
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(ElectionYear ~ CrisisCreated) +
geom_bar() +
theme_bw()
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(.~ ElectionYear1) +
geom_bar() +
theme_bw()
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(.~ CrisisCreated) +
geom_bar() +
theme_bw()
# Crisis Creation Variable (1 no crisis, 2 crisis)
FirstYearNotNa$CrisisCreated <- FALSE
FirstYearNotNa$CrisisCreated[FirstYearNotNa$AMCAnyCreate == 1 & FirstYearNotNa$SystemicCrisisLag3 == 1] <- TRUE
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(.~ CrisisCreated) +
geom_bar() +
theme_bw()
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(.~ CrisisCreated) +
geom_density() +
theme_bw()
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(.~ CrisisCreated) +
geom_bar() +
theme_bw()
